/**
 * Bank is the primary class for the banking application, housing all methods to process user input
 * The actual account computations occur in the account classes Checking, Saving, and Loan
 */
package edu.gcu.bootcamp.cst135.milestone.controller;

import java.text.DecimalFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.List;
import java.util.Scanner;

import edu.gcu.bootcamp.cst135.milestone.model.Account;
import edu.gcu.bootcamp.cst135.milestone.model.Customer;

public class Bank {

	//Class data
	private String bankName;
	private SimpleDateFormat dateFormat = new SimpleDateFormat("MM/dd/yyyy hh:mm:ss");
	private List<Customer> customers = new ArrayList<Customer>();
	private int custIndex = 0;
	
	//Class constants
	private static final int MENU_MIN = 1;
	private static final int MENU_MAX = 7;
	private static final int MENU_EXIT = 0;
	//Scanner on System.in for use in all classes
	public static Scanner scanner = new Scanner(System.in);
	//Format for money outputs in all classes
	public static DecimalFormat money = new DecimalFormat();
	public static final String MONEY_FORMAT = "$#,##0.00;($#,##0.00)";

	
	//Constructor
	public Bank(String bankName) {
		this.bankName = bankName;
		/*** CREATE LIST OF CUSTOMERS FOR INITIAL TESTING ***/
		customers.add(new Customer("Roy", "Chancellor", new Date(), "123456789"));
		customers.add(new Customer("Nathan", "Chancellor", new Date(), "234567890"));
		customers.add(new Customer("Kelsey", "Chancellor", new Date(), "345678901"));
		customers.add(new Customer("Robyn", "Chancellor", new Date(), "456789012"));
		customers.add(new Customer("Aaron", "Zephyr", new Date(), "567890123"));
		customers.add(new Customer("Betty", "Zephyr", new Date(), "678901234"));
		customers.add(new Customer("Crystal", "Aaronson", new Date(), "789012345"));
		customers.add(new Customer("Zilbah", "Aaronson", new Date(), "890123456"));
		
		//Sort the customers by lastName, firstName
		Collections.sort(customers);
		
		//Set the money format
		money.applyPattern(MONEY_FORMAT);
	}
	
	//Class methods
	
	/**
	 * Displays the highest level (main) menu and gets a user selection.
	 * If the user enters a non-integer, nextInt throws NumberFormatException
	 * which gets caught and calls method again
	 */
	public void viewMainMenu() {

		try {
			int option;
			do {
				System.out.println("\n$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$");
				System.out.println("                MAIN MENU");
				System.out.println("                " + bankName);
				System.out.println("$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$");
				System.out.println("Pick an option: ");
				System.out.println("-----------------------");
				System.out.println(" 1: Create New Customer");
				System.out.println(" 2: Select Existing Customer");
				System.out.println("------------------------");
				System.out.println(" " + MENU_EXIT + ": Exit Banking Application");
				//try to convert user input into an integer (throws InputMismatchException if not)
				option = scanner.nextInt();
				processMainMenu(option);
			} while (option != MENU_EXIT);
		}
		catch(Exception e) {  //generated by nextInt()
			printInputError(1, 2);
			//When a scanner throws an InputMismatchException, the scanner will not pass the token
			//that caused the exception, so that it may be retrieved or skipped via some other method.
			//So, read the token that caused the exception so it's not in the scanner anymore
			scanner.nextLine();
			//Re-call the menu method
			viewMainMenu();
		}
	}
	
	/**
	 * Calls the Create Customer menu or the Customer Selection Menu based on the option selected
	 * @param option
	 */
	private void processMainMenu(int option) {
		switch(option) {
			case 1:
				//viewCreateCustomer();
				break;
			case 2:
				viewCustomerSelectionMenu();
				break;
			case MENU_EXIT:
				viewBankingAppExit();
				break;
			default:
				printInputError(1, 2);
				viewMainMenu();
		}
	}
	
	/**
	 * Displays the customer selection menu and gets a user selection.
	 * If the user enters a non-integer, nextInt throws NumberFormatException
	 * which gets caught and calls method again
	 */
	public void viewCustomerSelectionMenu() {
		try {
			int option = 0;
			do {
				System.out.println("\n==============================");
				System.out.println("Choose Existing Customer");
				System.out.println("==============================");
				for(int i = 0; i < customers.size(); i++) {
					System.out.println(
						(i + 1) + " : "
						+ customers.get(i).getFirstName()
						+ " " + customers.get(i).getLastName()
					);
				}
				System.out.println("------------------------");
				System.out.println(" " + MENU_EXIT + ": Return to Main Menu");
				//try to convert user input into an integer (throws InputMismatchException if not)
				option = scanner.nextInt();
				
				if(option != MENU_EXIT) {
					//Validate the selection is between 1 and the customer list length
					if(option >= 1 && option <= customers.size()) {
						custIndex = option - 1;
						welcomeCustomer();
						viewCustomerActionMenu();
					}
					else
						printInputError(1, customers.size());
				}
			} while(option != MENU_EXIT);
		}
		catch(Exception e) {  //generated by nextInt()
			printInputError(1, customers.size());
			//When a scanner throws an InputMismatchException, the scanner will not pass the token
			//that caused the exception, so that it may be retrieved or skipped via some other method.
			//So, read the token that caused the exception so it's not in the scanner anymore
			scanner.nextLine();
			//Re-call the menu method
			viewCustomerSelectionMenu();
		}
	}
	
	/**
	 * prints a welcome message to the customer, verbose with loan details
	 */
	private void welcomeCustomer() {
		if(this.custIndex < customers.size())
			System.out.println(customers.get(custIndex).toString(true));
	}
	
	/**
	 * Displays the customer action menu and gets a user selection.
	 * If the user enters a non-integer, nextInt throws NumberFormatException
	 * which gets caught and calls method again
	 */
	public void viewCustomerActionMenu() {

		try {
			int option;
			do {
				System.out.println("\n$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$");
				System.out.println("            TRANSACTION MENU");
				System.out.println("                " + bankName);
				System.out.println("        Welcome " + customers.get(custIndex).getFirstName() + " " + customers.get(custIndex).getLastName() + "!");
				System.out.println("          " + dateFormat.format(new Date()));
				System.out.println("$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$");
				System.out.println("Pick an option: ");
				System.out.println("-----------------------");
				System.out.println(" 1: Deposit to Checking");
				System.out.println(" 2: Deposit to Savings");
				System.out.println(" 3: Withdraw from Checking");
				System.out.println(" 4: Withdraw from Savings");			
				System.out.println(" 5: Make a Loan Payment");			
				System.out.println(" 6: Get Account Balances");
				System.out.println(" 7: Get Monthly Statement");
				System.out.println("------------------------");
				System.out.println(" " + MENU_EXIT + ": Return to Customer Login");
				//try to convert user input into an integer (throws InputMismatchException if not)
				option = scanner.nextInt();
				processCustomerMenu(option);
			} while (option != MENU_EXIT);
		}
		catch(Exception e) {  //generated by nextInt()
			printInputError(MENU_MIN, MENU_MAX);
			//When a scanner throws an InputMismatchException, the scanner will not pass the token
			//that caused the exception, so that it may be retrieved or skipped via some other method.
			//So, read the token that caused the exception so it's not in the scanner anymore
			scanner.nextLine();
			//Re-call the menu method
			viewCustomerActionMenu();
		}
	}
	
	private void printInputError(int lower, int upper) {
		System.out.println("\n** Oops, please enter a number from " + lower + " to " + upper + " or " + MENU_EXIT + " to Logout\n");		
	}

	/**
	 * Calls a method to display the screen to process the user-selected option from the main menu
	 * After each transaction, calls viewBalances to update the user
	 * @param option
	 */
	private void processCustomerMenu(int option) {

		switch(option) {
		case 1:
			customers.get(custIndex).getChecking().doTransaction(
				Account.DEPOSIT,
				customers.get(custIndex).getChecking().getTransactionValue(Account.AMOUNT_MESSAGE + "deposit: ")
			);
			viewBalances();
			break;
		case 2:
			customers.get(custIndex).getSaving().doTransaction(
				Account.DEPOSIT,
				customers.get(custIndex).getSaving().getTransactionValue(Account.AMOUNT_MESSAGE + "deposit: ")
			);
			viewBalances();
			break;
		case 3:
			customers.get(custIndex).getChecking().doTransaction(
				Account.WITHDRAWAL,
				customers.get(custIndex).getChecking().getTransactionValue(Account.AMOUNT_MESSAGE + "withdraw: ")
			);
			viewBalances();
			break;
		case 4:
			customers.get(custIndex).getSaving().doTransaction(
				Account.WITHDRAWAL,
				customers.get(custIndex).getSaving().getTransactionValue(Account.AMOUNT_MESSAGE + "withdraw: ")
			);
			viewBalances();
			break;
		case 5:
			System.out.println("\nYour minimum monthly payment is "
				+ money.format(customers.get(custIndex).getLoan().getMonthlyPaymentAmount()));
			customers.get(custIndex).getLoan().doTransaction(
				customers.get(custIndex).getLoan().getTransactionValue(Account.AMOUNT_MESSAGE + "pay on the loan: ")
			);
			viewBalances();
			break;
		case 6: viewBalances();
			break;
		case 7:
			viewEndOfMonth();
			System.out.println(customers.get(custIndex).balancesToString());
			break;  
		case MENU_EXIT:
			viewCustomerExit();
			break;
		default:
			printInputError(MENU_MIN, MENU_MAX);
			viewCustomerActionMenu();
		}
	}
	
	/**
	 * Displays all account balances
	 */
	private void viewBalances() {
		System.out.println(customers.get(custIndex).toString(false));
	}
	
	/**
	 * Shows the end of month screen and performs the end-of-month calculations
	 */
	private void viewEndOfMonth() {

		System.out.println("\n$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$");
		System.out.println("                 GCU BANK");
		System.out.println("               END OF MONTH");
		System.out.println("      Statement for " + customers.get(custIndex).getFirstName() + " " + customers.get(custIndex).getLastName());
		System.out.println("          " + dateFormat.format(new Date()));
		System.out.println("$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$\n");

		//Determine if the end of the month has occurred (NOT IMPLEMENTED YET)
		boolean endOfMonth = true;
		if(endOfMonth) {
			System.out.println("\nMonthly charges and credits:");
			//SAVINGS
			//Service fee (deduct before computing interest)
			if(customers.get(custIndex).getSaving().getAccountBalance() < customers.get(custIndex).getSaving().getMinBalance()) {
				System.out.println("\n* Service fee charged: "
						+ money.format(customers.get(custIndex).getSaving().getServiceFee())
						+ "(savings below minimum balance)");

				customers.get(custIndex).getSaving().setAccountBalance(
					customers.get(custIndex).getSaving().getAccountBalance()
					- customers.get(custIndex).getSaving().getServiceFee()
				);
			}
			//Interest on any positive balance (interest compounded monthly)
			if (customers.get(custIndex).getSaving().getAccountBalance() > 0) {
				double interestEarned = customers.get(custIndex).getSaving().getAccountBalance()
						* customers.get(custIndex).getSaving().getInterestRate();
				
				customers.get(custIndex).getSaving().setAccountBalance(
					customers.get(custIndex).getSaving().getAccountBalance()
					+ interestEarned
				);
				System.out.println("\n* Savings interest earned: " + money.format(interestEarned));
			}
			
			//LOAN
			if (customers.get(custIndex).getLoan().getAccountBalance() < 0) {
				//Interest
				double eomAdder = customers.get(custIndex).getLoan().doEndOfMonthInterest();
				System.out.println("\n* Loan interest charged: " + money.format(Math.abs(eomAdder)));
				
				//Late fee
				if(customers.get(custIndex).getLoan().checkLateFee()) {
					eomAdder -= customers.get(custIndex).getLoan().getLateFee();
					System.out.println("\n* Late fee charged: "
						+ money.format(customers.get(custIndex).getLoan().getLateFee())
						+ " (failure to make the minimum payment)\n"
					);
				}
				
				//New balance
				customers.get(custIndex).getLoan().setAccountBalance(
					customers.get(custIndex).getLoan().getAccountBalance() + eomAdder
				);
				
				//Reset the amount paid for the month to zero
				customers.get(custIndex).getLoan().setAmountPaidThisMonth(0);
			}
			else {
				System.out.println("\nCongratulations, your loan is now paid off!");
			}
		}
		else {
			System.out.println("\nSorry, the <current month> is not complete.");
		}
	}		

	/**
	 * Outputs a message to the customer when exiting the customer transaction menu
	 */
	private void viewCustomerExit() {
		System.out.println("\nGoodbye " + customers.get(custIndex).getFirstName() + ". Have a good day!\n");
	}

	/**
	 * Outputs a message to the banker when exiting the banking application completely
	 */
	private void viewBankingAppExit() {
		System.out.println("\nGoodbye banker. Application closed at " + dateFormat.format(new Date()) + ". Have a good day!\n");
	}

}