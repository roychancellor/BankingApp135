/**
 * Bank is the primary class for the banking application, housing all methods to process user input
 * The actual account computations occur in the account classes Checking, Saving, and Loan
 */
package edu.gcu.bootcamp.cst135.milestone.controller;

import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Scanner;

import edu.gcu.bootcamp.cst135.milestone.model.Account;
import edu.gcu.bootcamp.cst135.milestone.model.Customer;

public class Bank {

	/*** TEST SETUP ***/
	Customer cust = new Customer("Roy", "Chancellor", new Date());
	Saving saving = new Saving("S12345",5000,Saving.MINIMUM_BALANCE,Saving.BELOW_MIN_BALANCE_FEE,Saving.INTEREST_RATE);
	Checking checking = new Checking("C23456",5000,Checking.OVERDRAFT_FEE);
	Loan loan = new Loan("L34567",-5000,Loan.LATE_FEE,Loan.INTEREST_RATE);
	//Class data
	public static Scanner scanner = new Scanner(System.in);
	private SimpleDateFormat dateFormat = new SimpleDateFormat("MM/dd/yyyy hh:mm:ss");
	
	//Class methods
	/**
	 * Outputs a message to the customer when exiting the banking app
	 */
	private void viewExitScreen() {
		System.out.println("Goodbye, Have a good day!");
	}

	/**
	 * Displays the main menu and gets a user selection.
	 * If the user enters a non-integer, parseInt throws NumberFormatException
	 * which gets caught and calls viewCustomerMenu again
	 */
	public void viewCustomerMenu() {

		try {
			int option;
			do {
				System.out.println("\n$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$");
				System.out.println("                MAIN MENU");
				System.out.println("                GCU BANK");
				System.out.println("        Welcome " + cust.getFirstName() + " " + cust.getLastName() + "!");
				System.out.println("          " + dateFormat.format(new Date()));
				System.out.println("$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$");
				System.out.println("Pick an option: ");
				System.out.println("-----------------------");
				System.out.println(" 1: Deposit to Checking");
				System.out.println(" 2: Deposit to Savings");
				System.out.println(" 3: Withdraw from Checking");
				System.out.println(" 4: Withdraw from Savings");			
				System.out.println(" 5: Make a Loan Payment");			
				System.out.println(" 6: Get balance");
				System.out.println(" 7: Get monthly statement");
				System.out.println("------------------------");
				System.out.println(" 9: : Logout");
				//try to convert user input into an integer (throws InputMismatchException if not)
				option = scanner.nextInt();
				processCustomerMenu(option);
			} while (option != 9);
		}
		catch(Exception e) {  //generated by nextInt()
			System.out.println("Wrong input: Enter the numbers 1-7 or 9 to Logout\n");
			//When a scanner throws an InputMismatchException, the scanner will not pass the token
			//that caused the exception, so that it may be retrieved or skipped via some other method.
			//So, read the token that caused the exception so it's not in the scanner anymore
			scanner.nextLine();
			//Re-call the menu method
			viewCustomerMenu();
		}
	}

	/**
	 * Calls a method to display the screen to process the user-selected option from the main menu
	 * After each transaction, calls viewBalances to update the user
	 * @param option
	 */
	private void processCustomerMenu(int option) {

		switch(option) {
		case 1:
			checking.doTransaction(
				Account.DEPOSIT,
				checking.getTransactionValue(Account.AMOUNT_MESSAGE + "deposit: ")
			);
			viewBalances();
			break;
		case 2:
			saving.doTransaction(
				Account.DEPOSIT,
				saving.getTransactionValue(Account.AMOUNT_MESSAGE + "deposit: ")
			);
			viewBalances();
			break;
		case 3:
			checking.doTransaction(
				Account.WITHDRAWAL,
				checking.getTransactionValue(Account.AMOUNT_MESSAGE + "withdraw: ")
			);
			viewBalances();
			break;
		case 4:
			saving.doTransaction(
				Account.WITHDRAWAL,
				saving.getTransactionValue(Account.AMOUNT_MESSAGE + "withdraw: ")
			);
			viewBalances();
			break;
		case 5:
			loan.doTransaction(
				Account.DEPOSIT,
				loan.getTransactionValue(Account.AMOUNT_MESSAGE + "pay on the loan: ")
			);
			viewBalances();
			break;
		case 6: viewBalances();
			break;
		case 7:
			viewEndOfMonth();
			viewBalances();
			break;  
		case 9:
			viewExitScreen();
			break;
		default:
			System.out.println("Invalid menu selection:");
			viewCustomerMenu();
		}
	}
	
	/**
	 * Displays all account balances
	 */
	private void viewBalances() {
		System.out.println("\n------------------------");	
		System.out.println(saving.toString());
		System.out.println(checking.toString());
		System.out.println(loan.toString());
		System.out.println("------------------------");
	}
	
	/**
	 * Shows the end of month screen and performs the end-of-month calculations
	 */
	private void viewEndOfMonth() {

		System.out.println("\n$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$");
		System.out.println("               END OF MONTH");
		System.out.println("                 GCU BANK");
		System.out.println("$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$\n");

		//Determine if a service fee is required
		if(saving.getAccountBalance() < saving.getMinBalance()) {
			System.out.printf("A $%.2f service fee is being assessed for below minimum balance in savings", saving.getServiceFee());
			saving.setAccountBalance(saving.getAccountBalance() - saving.getServiceFee());
		}
		//Compute interest on any positive balance
		if (saving.getAccountBalance() > 0){
			saving.setAccountBalance(saving.getAccountBalance() + (saving.getInterest() * saving.getAccountBalance()));
		}	
	}		

}